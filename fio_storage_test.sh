#—Å–¥–µ–ª–∞–ª üí™ ‚Äî —Å–∫—Ä–∏–ø—Ç –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –ø—É—Ç—å –∫ –∫–∞—Ç–∞–ª–æ–≥—É, –≥–æ–Ω—è–µ—Ç –æ–¥–Ω–æ–ø–æ—Ç–æ—á–Ω—ã–µ –∏ 4-–ø–æ—Ç–æ—á–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª–∏, –≤—ã–≤–æ–¥–∏—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏ –Ω–∞ —ç–∫—Ä–∞–Ω, –∏ –≤ –ª–æ–≥-—Ñ–∞–π–ª (–≤ –∫–∞—Ç–∞–ª–æ–≥–µ —Ç–µ—Å—Ç–∞). –í—Ä–µ–º–µ–Ω–Ω—ã–π —Ç–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª —É–¥–∞–ª—è–µ—Ç—Å—è, job-—Ñ–∞–π–ª –∏ –ª–æ–≥–∏ –æ—Å—Ç–∞—é—Ç—Å—è.
#!/bin/bash
# fio_storage_test.sh
# –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
#   ./fio_storage_test.sh /mnt/storage [--size 16G]
#   ./fio_storage_test.sh /mnt/storage [--size=16G]
#
# –í—ã–≤–æ–¥: –Ω–∞ —ç–∫—Ä–∞–Ω –∏ –≤ –ª–æ–≥ fio_results_YYYYmmdd_HHMMSS.log –≤ –∫–∞—Ç–∞–ª–æ–≥–µ —Ç–µ—Å—Ç–∞

set -euo pipefail

if ! command -v fio >/dev/null 2>&1; then
  echo "fio –Ω–µ –Ω–∞–π–¥–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏: sudo apt-get update && sudo apt-get install -y fio"
  exit 1
fi

if [ $# -lt 1 ]; then
  echo "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: $0 <–∫–∞—Ç–∞–ª–æ–≥ –¥–ª—è —Ç–µ—Å—Ç–∞> [--size 16G]"
  exit 1
fi

TARGET_DIR="$1"; shift || true

# --- —Ä–∞–∑–±–æ—Ä —Ñ–ª–∞–≥–æ–≤ ---
USER_SIZE=""
while [ $# -gt 0 ]; do
  case "$1" in
    --size)
      [ $# -ge 2 ] || { echo "–û—à–∏–±–∫–∞: –ø–æ—Å–ª–µ --size –Ω—É–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ (–Ω–∞–ø—Ä. 16G)"; exit 1; }
      USER_SIZE="$2"; shift 2;;
    --size=*)
      USER_SIZE="${1#--size=}"; shift;;
    *)
      echo "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∞—Ä–≥—É–º–µ–Ω—Ç: $1"; exit 1;;
  esac
done

if [ ! -d "$TARGET_DIR" ]; then
  echo "–ö–∞—Ç–∞–ª–æ–≥ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: $TARGET_DIR"
  exit 1
fi
if [ ! -w "$TARGET_DIR" ]; then
  echo "–ù–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –∑–∞–ø–∏—Å—å –≤ –∫–∞—Ç–∞–ª–æ–≥: $TARGET_DIR"
  exit 1
fi

# --- —É—Ç–∏–ª–∏—Ç–∞: –ø–µ—Ä–µ–≤–æ–¥ —Ä–∞–∑–º–µ—Ä–∞ –≤ MiB (–ø–æ–¥–¥–µ—Ä–∂–∫–∞ K,M,G,T, –¥–æ–ø—É—Å–∫–∞–µ—Ç—Å—è ...iB/..B) ---
to_mib() {
  local s="${1^^}"
  s="${s//IB/}"; s="${s//B/}"   # —É–±–∏—Ä–∞–µ–º iB/B
  local num unit
  num="${s%[KMGT]}"; unit="${s:${#num}}"
  # –µ—Å–ª–∏ –Ω–µ—Ç —Å—É—Ñ—Ñ–∏–∫—Å–∞ ‚Äî —Å—á–∏—Ç–∞–µ–º, —á—Ç–æ MiB
  case "$unit" in
    K) echo $(( (num + 1023) / 1024 ));;
    M|"") echo $(( num ));;
    G) echo $(( num * 1024 ));;
    T) echo $(( num * 1024 * 1024 ));;
    *) echo 0;;
  esac
}

# --- –≤—ã—á–∏—Å–ª–µ–Ω–∏–µ/–ø—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–º–µ—Ä–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Ñ–∞–π–ª–∞ ---
avail_kb=$(df -Pk "$TARGET_DIR" | awk 'NR==2{print $4}')
[ -n "$avail_kb" ] && [ "$avail_kb" -gt 0 ] || { echo "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Å–≤–æ–±–æ–¥–Ω–æ–µ –º–µ—Å—Ç–æ –≤ $TARGET_DIR"; exit 1; }
avail_mib=$(( avail_kb / 1024 ))

MIN_MIB=512          # 512 MiB –º–∏–Ω–∏–º—É–º
MAX_MIB=32768        # 32 GiB –º–∞–∫—Å–∏–º—É–º

if [ -n "$USER_SIZE" ]; then
  req_mib=$(to_mib "$USER_SIZE")
  [ "$req_mib" -gt 0 ] || { echo "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ä–∞–∑–º–µ—Ä –≤ --size: $USER_SIZE"; exit 1; }
  if [ "$req_mib" -gt "$avail_mib" ]; then
    echo "–ó–∞–ø—Ä–æ—à–µ–Ω–Ω—ã–π —Ä–∞–∑–º–µ—Ä ${USER_SIZE} –±–æ–ª—å—à–µ –¥–æ—Å—Ç—É–ø–Ω–æ–≥–æ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞ (~${avail_mib}MiB) –≤ $TARGET_DIR"
    exit 1
  fi
  FILE_SIZE="${USER_SIZE}"
else
  # –∞–≤—Ç–æ-–ø–æ–¥–±–æ—Ä ‚âà60% —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ, —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è–º–∏
  file_mib=$(( (avail_mib * 60) / 100 ))
  [ $file_mib -gt $MAX_MIB ] && file_mib=$MAX_MIB
  [ $file_mib -lt $MIN_MIB ] && file_mib=$MIN_MIB
  FILE_SIZE="${file_mib}M"
fi

TS="$(date +%Y%m%d_%H%M%S)"
TEST_FILE="$TARGET_DIR/fio_testfile"
JOB_FILE="$TARGET_DIR/fio_job_${TS}.fio"
LOG_FILE="$TARGET_DIR/fio_results_${TS}.log"

cleanup() { rm -f "$TEST_FILE"; }
trap cleanup EXIT

# –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø—Ä–æ—Ñ–∏–ª–µ–π
RUNTIME=30            # —Å–µ–∫ –Ω–∞ –ø—Ä–æ—Ñ–∏–ª—å
SEQ_BS=1M             # –±–ª–æ–∫ –¥–ª—è –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
RAND_BS=4k            # –±–ª–æ–∫ –¥–ª—è —Å–ª—É—á–∞–π–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
SEQ_IOD=4             # iodepth –¥–ª—è –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã—Ö
RAND_IOD=32           # iodepth –¥–ª—è —Å–ª—É—á–∞–π–Ω—ã—Ö

cat > "$JOB_FILE" <<EOF
[global]
ioengine=libaio
direct=1
time_based=1
runtime=${RUNTIME}
group_reporting=1
filename=${TEST_FILE}
size=${FILE_SIZE}
refill_buffers=1
fsync_on_close=1

# ================= –û–¥–Ω–æ–ø–æ—Ç–æ—á–Ω—ã–µ =================
[seq_read_1job]
bs=${SEQ_BS}
rw=read
iodepth=${SEQ_IOD}
numjobs=1

[seq_write_1job]
bs=${SEQ_BS}
rw=write
iodepth=${SEQ_IOD}
numjobs=1

[rand_read_1job]
bs=${RAND_BS}
rw=randread
iodepth=${RAND_IOD}
numjobs=1

[rand_write_1job]
bs=${RAND_BS}
rw=randwrite
iodepth=${RAND_IOD}
numjobs=1

[rand_rw_1job]
bs=${RAND_BS}
rw=randrw
rwmixread=70
iodepth=${RAND_IOD}
numjobs=1

# ================= –ú–Ω–æ–≥–æ–ø–æ—Ç–æ—á–Ω—ã–µ (4 jobs) =================
[seq_read_4job]
bs=${SEQ_BS}
rw=read
iodepth=${SEQ_IOD}
numjobs=4

[seq_write_4job]
bs=${SEQ_BS}
rw=write
iodepth=${SEQ_IOD}
numjobs=4

[rand_read_4job]
bs=${RAND_BS}
rw=randread
iodepth=${RAND_IOD}
numjobs=4

[rand_write_4job]
bs=${RAND_BS}
rw=randwrite
iodepth=${RAND_IOD}
numjobs=4

[rand_rw_4job]
bs=${RAND_BS}
rw=randrw
rwmixread=70
iodepth=${RAND_IOD}
numjobs=4
EOF

echo "=== FIO —Ç–µ—Å—Ç –°–•–î ===" | tee "$LOG_FILE"
echo "–ö–∞—Ç–∞–ª–æ–≥: $TARGET_DIR" | tee -a "$LOG_FILE"
echo "Job-—Ñ–∞–π–ª: $JOB_FILE" | tee -a "$LOG_FILE"
echo "–õ–æ–≥: $LOG_FILE" | tee -a "$LOG_FILE"
echo "–†–∞–∑–º–µ—Ä —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Ñ–∞–π–ª–∞ (size): ${FILE_SIZE}" | tee -a "$LOG_FILE"
echo "–í—Ä–µ–º—è –Ω–∞ –ø—Ä–æ—Ñ–∏–ª—å: ${RUNTIME} c" | tee -a "$LOG_FILE"
echo "–ù–∞—á–∞–ª–æ: $(date '+%F %T')" | tee -a "$LOG_FILE"
echo "----------------------------------------" | tee -a "$LOG_FILE"

fio "$JOB_FILE" | tee -a "$LOG_FILE"

echo "----------------------------------------" | tee -a "$LOG_FILE"
echo "–ì–æ—Ç–æ–≤–æ. –í—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —É–¥–∞–ª–µ–Ω—ã, —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤: $LOG_FILE" | tee -a "$LOG_FILE"
echo "Job-—Ñ–∞–π–ª —Å–æ—Ö—Ä–∞–Ω—ë–Ω: $JOB_FILE" | tee -a "$LOG_FILE"

#–∫–∞–∫ –∑–∞–ø—É—Å–∫–∞—Ç—å:

#chmod +x fio_storage_test.sh
# –∞–≤—Ç–æ-–ø–æ–¥–±–æ—Ä —Ä–∞–∑–º–µ—Ä–∞
#./fio_storage_test.sh /mnt/storage

# —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ä–∞–∑–º–µ—Ä 16 GiB
#./fio_storage_test.sh /mnt/storage --size 16G

# —ç–∫–≤–∏–≤–∞–ª–µ–Ω—Ç–Ω–∞—è –∑–∞–ø–∏—Å—å
#./fio_storage_test.sh /mnt/storage --size=8G
